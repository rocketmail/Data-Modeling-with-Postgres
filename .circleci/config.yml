# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

orbs:
  welcome: circleci/welcome-orb@0.4.1
commands:
  print-pipeline-id:
    parameters:
      id:
        type: string
    steps:
      - run: echo << parameters.id >>
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  save-hello-world-output:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      - image: circleci/node:13.8.0
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - run: echo "text to output here" > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt
  print-output-file:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - attach_workspace:
          at: ~/
      - run: cat ~/output.txt
  my-job-getcomand:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - print-pipeline-id:
          id: << pipeline.id >>
  my-on-fail:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: return 1
      - run:
          name: on error
          command: echo "Hello error!"
          when: on_fail
# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  say-hello-workflow:
    jobs:
      # - save-hello-world-output
      # - print-output-file:
          # requires:
              #  save-hello-world-output
      # - my-job-getcomand
      - my-on-fail

